# --------------------------- ABOUT --------------------------------------
# this pipeline deploys code to an Azure webapp pointing to a pgsql db
# `main` depoloys to the main app, while each PR deploys to an ephemeral "preview" url
# the db for each preview uses a PR-specific schema so it is independent
# NOTE: this requires our db to be open to azure services, so both pipelines & web can talk to the db
# NOTE: we aren't seeding the db but eventually we might want to -- that would go right after `npx prisma migrate deploy`
trigger:
  branches:
    include:
      - main # prod deploys

pr: # preview deploys
  branches:
    include:
      - '*' # every PR against any branch

#---------------------------- SHARED SECRETS ------------------------------
variables:
  - group: app-template-ci # include PG info and GH token

  # some more constants i didn't feel like putting in secrets
  - name: RG
    value: 'app-template'
  - name: APP_NAME
    value: 'app-template-web'

# ─────────────────── PREVIEW  (slot per PR) ───────────────────
stages:
  - stage: preview
    condition: and(eq(variables['Build.Reason'], 'PullRequest'),
      ne(variables['System.PullRequest.PullRequestAction'], 'Closed'))
    jobs:
      - job: build_preview
        pool: { vmImage: 'ubuntu-latest' }

        steps:
          - checkout: self

          - bash: |
              set -e
              sudo apt-get -qq update && sudo apt-get -yqq install postgresql-client zip

              # ───── helper functions (local to this script) ─────
              ensure_slot() {
                az webapp deployment slot show -g $RG -n $APP_NAME -s "$1" >/dev/null 2>&1 ||
                az webapp deployment slot create -g $RG -n $APP_NAME --slot "$1"
              }
              make_zip() { zip -r app.zip * .[!.]* ; }

              # ───── per-PR variables ─────
              PR=$(System.PullRequest.PullRequestId)
              SLOT="pr-${PR}"
              export PGSCHEMA="pr_${PR}"
              export DATABASE_URL="postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/main?schema=${PGSCHEMA}"

              # ───── create schema ─────
              psql "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/main" \
                   -c "CREATE SCHEMA IF NOT EXISTS ${PGSCHEMA}"

              # ───── CI build ─────
              pushd web
              npm ci
              npx prisma migrate deploy --schema ./prisma/schema.prisma
              npm run build
              popd
              make_zip

              # ───── slot deploy ─────
              ensure_slot "$SLOT"
              az webapp config appsettings set -g $RG -n $APP_NAME --slot $SLOT \
                   --settings WEBSITE_RUN_FROM_PACKAGE=1 \
                              DATABASE_URL="$DATABASE_URL" \
                              PGSCHEMA="$PGSCHEMA"
              az webapp deploy -g $RG -n $APP_NAME --slot $SLOT \
                               --type zip --src-path app.zip

              echo "##vso[task.setvariable variable=PREVIEW_URL]https://$APP_NAME-$SLOT.azurewebsites.net"
            env: { PGPASSWORD: $(PGPASSWORD) }
            displayName: 'Build & deploy preview slot'

          - bash: |
              PR=$(System.PullRequest.PullRequestId)
              OWNER=$(Build.Repository.Name | cut -d'/' -f1)
              REPO=$(Build.Repository.Name | cut -d'/' -f2)
              curl -s -X POST \
                -H "Authorization: token $(GH_TOKEN)" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/$OWNER/$REPO/issues/$PR/comments" \
                -d "{\"body\":\"▶ **Preview**: $(PREVIEW_URL)\"}"
            displayName: 'Comment preview URL'
            condition: succeeded()

  # ─────────────────── CLEAN-UP when PR closed ───────────────────
  - stage: cleanup
    condition: and(eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.PullRequestAction'], 'Closed'))
    jobs:
      - job: cleanup_job
        pool: { vmImage: 'ubuntu-latest' }
        steps:
          - bash: |
              set -e
              sudo apt-get -qq update && sudo apt-get -yqq install postgresql-client
              PR=$(System.PullRequest.PullRequestId)
              SLOT="pr-${PR}"

              psql "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/main" \
                   -c "DROP SCHEMA IF EXISTS pr_${PR} CASCADE" || true
              az webapp deployment slot delete -g $RG -n $APP_NAME --slot $SLOT || true
            env: { PGPASSWORD: $(PGPASSWORD) }
            displayName: 'Drop schema & slot'

  # ─────────────────── PRODUCTION on main ───────────────────────
  - stage: production
    dependsOn: []
    condition: and(eq(variables['Build.SourceBranch'],'refs/heads/main'),
      ne(variables['Build.Reason'],'PullRequest'))
    jobs:
      - job: deploy_prod
        pool: { vmImage: 'ubuntu-latest' }
        steps:
          - checkout: self
          - bash: |
              set -e
              sudo apt-get -qq update && sudo apt-get -yqq install postgresql-client zip

              export DATABASE_URL="postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/main"

              pushd web
              npm ci
              npx prisma migrate deploy --schema ./prisma/schema.prisma
              npm run build
              popd
              zip -r app.zip * .[!.]*

              az webapp config appsettings set -g $RG -n $APP_NAME \
                   --settings WEBSITE_RUN_FROM_PACKAGE=1 DATABASE_URL="$DATABASE_URL"
              az webapp deploy -g $RG -n $APP_NAME --type zip --src-path app.zip
            env: { PGPASSWORD: $(PGPASSWORD) }
            displayName: 'Build, migrate, deploy prod'
